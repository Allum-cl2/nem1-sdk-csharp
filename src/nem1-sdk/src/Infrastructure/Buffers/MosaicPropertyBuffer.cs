// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>


using System;
using io.nem1.sdk.Infrastructure.Imported.FlatBuffers;

namespace io.nem1.sdk.Infrastructure.Buffers
{
    internal struct MosaicPropertyBuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  internal static MosaicPropertyBuffer GetRootAsMosaicPropertyBuffer(ByteBuffer _bb) { return GetRootAsMosaicPropertyBuffer(_bb, new MosaicPropertyBuffer()); }
  internal static MosaicPropertyBuffer GetRootAsMosaicPropertyBuffer(ByteBuffer _bb, MosaicPropertyBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  internal MosaicPropertyBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  internal int LengthOfPropertyStructure { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal int LengthOfPropertyName { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal sbyte PropertyName(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  internal int PropertyNameLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetPropertyNameBytes() { return __p.__vector_as_arraysegment(8); }
  internal int LengthOfPropertyValue { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal sbyte PropertyValue(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  internal int PropertyValueLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetPropertyValueBytes() { return __p.__vector_as_arraysegment(12); }

  internal static Offset<MosaicPropertyBuffer> CreateMosaicPropertyBuffer(FlatBufferBuilder builder,
      int lengthOfPropertyStructure = 0,
      int lengthOfPropertyName = 0,
      VectorOffset propertyNameOffset = default(VectorOffset),
      int lengthOfPropertyValue = 0,
      VectorOffset propertyValueOffset = default(VectorOffset)) {
    builder.StartObject(5);
    MosaicPropertyBuffer.AddPropertyValue(builder, propertyValueOffset);
    MosaicPropertyBuffer.AddLengthOfPropertyValue(builder, lengthOfPropertyValue);
    MosaicPropertyBuffer.AddPropertyName(builder, propertyNameOffset);
    MosaicPropertyBuffer.AddLengthOfPropertyName(builder, lengthOfPropertyName);
    MosaicPropertyBuffer.AddLengthOfPropertyStructure(builder, lengthOfPropertyStructure);
    return MosaicPropertyBuffer.EndMosaicPropertyBuffer(builder);
  }

  internal static void StartMosaicPropertyBuffer(FlatBufferBuilder builder) { builder.StartObject(5); }
  internal static void AddLengthOfPropertyStructure(FlatBufferBuilder builder, int lengthOfPropertyStructure) { builder.AddInt(0, lengthOfPropertyStructure, 0); }
  internal static void AddLengthOfPropertyName(FlatBufferBuilder builder, int lengthOfPropertyName) { builder.AddInt(1, lengthOfPropertyName, 0); }
  internal static void AddPropertyName(FlatBufferBuilder builder, VectorOffset propertyNameOffset) { builder.AddOffset(2, propertyNameOffset.Value, 0); }
  internal static VectorOffset CreatePropertyNameVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartPropertyNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static void AddLengthOfPropertyValue(FlatBufferBuilder builder, int lengthOfPropertyValue) { builder.AddInt(3, lengthOfPropertyValue, 0); }
  internal static void AddPropertyValue(FlatBufferBuilder builder, VectorOffset propertyValueOffset) { builder.AddOffset(4, propertyValueOffset.Value, 0); }
  internal static VectorOffset CreatePropertyValueVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartPropertyValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static Offset<MosaicPropertyBuffer> EndMosaicPropertyBuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MosaicPropertyBuffer>(o);
  }
};


}
