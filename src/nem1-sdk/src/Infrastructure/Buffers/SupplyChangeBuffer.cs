// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using io.nem1.sdk.Infrastructure.Imported.FlatBuffers;

namespace io.nem1.sdk.Infrastructure.Buffers
{
    internal struct SupplyChangeBuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  internal static SupplyChangeBuffer GetRootAsSupplyChangeBuffer(ByteBuffer _bb) { return GetRootAsSupplyChangeBuffer(_bb, new SupplyChangeBuffer()); }
  internal static SupplyChangeBuffer GetRootAsSupplyChangeBuffer(ByteBuffer _bb, SupplyChangeBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  internal SupplyChangeBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  internal int TransactionType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal short Version { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  internal short Network { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  internal int Timestamp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal int PublicKeyLen { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal sbyte PublicKey(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  internal int PublicKeyLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetPublicKeyBytes() { return __p.__vector_as_arraysegment(14); }
  internal long Fee { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  internal int Deadline { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal int LengthOfMosaicIdStructure { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal int LengthOfNamespaceIdString { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal sbyte NamespaceIdstring(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  internal int NamespaceIdstringLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetNamespaceIdstringBytes() { return __p.__vector_as_arraysegment(24); }
  internal int LengthOfMosaicNameString { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal sbyte MosaicNameString(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  internal int MosaicNameStringLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetMosaicNameStringBytes() { return __p.__vector_as_arraysegment(28); }
  internal int SupplyType { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal long Delta { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  internal static Offset<SupplyChangeBuffer> CreateSupplyChangeBuffer(FlatBufferBuilder builder,
      int transactionType = 0,
      short version = 0,
      short network = 0,
      int timestamp = 0,
      int publicKeyLen = 0,
      VectorOffset publicKeyOffset = default(VectorOffset),
      ulong fee = 0,
      int deadline = 0,
      int lengthOfMosaicIdStructure = 0,
      int lengthOfNamespaceIdString = 0,
      VectorOffset namespaceIdstringOffset = default(VectorOffset),
      int lengthOfMosaicNameString = 0,
      VectorOffset mosaicNameStringOffset = default(VectorOffset),
      int supplyType = 0,
      ulong delta = 0) {
    builder.StartObject(15);
    SupplyChangeBuffer.AddDelta(builder, delta);
    SupplyChangeBuffer.AddFee(builder, fee);
    SupplyChangeBuffer.AddSupplyType(builder, supplyType);
    SupplyChangeBuffer.AddMosaicNameString(builder, mosaicNameStringOffset);
    SupplyChangeBuffer.AddLengthOfMosaicNameString(builder, lengthOfMosaicNameString);
    SupplyChangeBuffer.AddNamespaceIdstring(builder, namespaceIdstringOffset);
    SupplyChangeBuffer.AddLengthOfNamespaceIdString(builder, lengthOfNamespaceIdString);
    SupplyChangeBuffer.AddLengthOfMosaicIdStructure(builder, lengthOfMosaicIdStructure);
    SupplyChangeBuffer.AddDeadline(builder, deadline);
    SupplyChangeBuffer.AddPublicKey(builder, publicKeyOffset);
    SupplyChangeBuffer.AddPublicKeyLen(builder, publicKeyLen);
    SupplyChangeBuffer.AddTimestamp(builder, timestamp);
    SupplyChangeBuffer.AddTransactionType(builder, transactionType);
    SupplyChangeBuffer.AddNetwork(builder, network);
    SupplyChangeBuffer.AddVersion(builder, version);
    return SupplyChangeBuffer.EndSupplyChangeBuffer(builder);
  }

  internal static void StartSupplyChangeBuffer(FlatBufferBuilder builder) { builder.StartObject(15); }
  internal static void AddTransactionType(FlatBufferBuilder builder, int transactionType) { builder.AddInt(0, transactionType, 0); }
  internal static void AddVersion(FlatBufferBuilder builder, short version) { builder.AddShort(1, version, 0); }
  internal static void AddNetwork(FlatBufferBuilder builder, short network) { builder.AddShort(2, network, 0); }
  internal static void AddTimestamp(FlatBufferBuilder builder, int timestamp) { builder.AddInt(3, timestamp, 0); }
  internal static void AddPublicKeyLen(FlatBufferBuilder builder, int publicKeyLen) { builder.AddInt(4, publicKeyLen, 0); }
  internal static void AddPublicKey(FlatBufferBuilder builder, VectorOffset publicKeyOffset) { builder.AddOffset(5, publicKeyOffset.Value, 0); }
  internal static VectorOffset CreatePublicKeyVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartPublicKeyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static void AddFee(FlatBufferBuilder builder, ulong fee) { builder.AddUlong(6, fee, 0); }
  internal static void AddDeadline(FlatBufferBuilder builder, int deadline) { builder.AddInt(7, deadline, 0); }
  internal static void AddLengthOfMosaicIdStructure(FlatBufferBuilder builder, int lengthOfMosaicIdStructure) { builder.AddInt(8, lengthOfMosaicIdStructure, 0); }
  internal static void AddLengthOfNamespaceIdString(FlatBufferBuilder builder, int lengthOfNamespaceIdString) { builder.AddInt(9, lengthOfNamespaceIdString, 0); }
  internal static void AddNamespaceIdstring(FlatBufferBuilder builder, VectorOffset namespaceIdstringOffset) { builder.AddOffset(10, namespaceIdstringOffset.Value, 0); }
  internal static VectorOffset CreateNamespaceIdstringVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartNamespaceIdstringVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static void AddLengthOfMosaicNameString(FlatBufferBuilder builder, int lengthOfMosaicNameString) { builder.AddInt(11, lengthOfMosaicNameString, 0); }
  internal static void AddMosaicNameString(FlatBufferBuilder builder, VectorOffset mosaicNameStringOffset) { builder.AddOffset(12, mosaicNameStringOffset.Value, 0); }
  internal static VectorOffset CreateMosaicNameStringVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartMosaicNameStringVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static void AddSupplyType(FlatBufferBuilder builder, int supplyType) { builder.AddInt(13, supplyType, 0); }
  internal static void AddDelta(FlatBufferBuilder builder, ulong delta) { builder.AddUlong(14, delta, 0); }
  internal static Offset<SupplyChangeBuffer> EndSupplyChangeBuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SupplyChangeBuffer>(o);
  }
  internal static void FinishSupplyChangeBufferBuffer(FlatBufferBuilder builder, Offset<SupplyChangeBuffer> offset) { builder.Finish(offset.Value); }
};


}
