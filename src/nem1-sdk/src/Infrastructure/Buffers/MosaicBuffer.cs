// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using io.nem1.sdk.Infrastructure.Imported.FlatBuffers;

namespace io.nem1.sdk.Infrastructure.Buffers
{
    internal struct MosaicBuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  internal static MosaicBuffer GetRootAsMosaicBuffer(ByteBuffer _bb) { return GetRootAsMosaicBuffer(_bb, new MosaicBuffer()); }
  internal static MosaicBuffer GetRootAsMosaicBuffer(ByteBuffer _bb, MosaicBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  internal MosaicBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  internal int MosaicStructureLen { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal int MosaicIdStructureLen { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal int NamespaceIdLen { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal sbyte NamespaceString(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  internal int NamespaceStringLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetNamespaceStringBytes() { return __p.__vector_as_arraysegment(10); }
  internal int MosaicIdLen { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal sbyte MosaicIdString(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  internal int MosaicIdStringLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetMosaicIdStringBytes() { return __p.__vector_as_arraysegment(14); }
  internal long Quantity { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  internal static Offset<MosaicBuffer> CreateMosaicBuffer(FlatBufferBuilder builder,
      int mosaicStructureLen = 0,
      int mosaicIdStructureLen = 0,
      int namespaceIdLen = 0,
      VectorOffset namespaceStringOffset = default(VectorOffset),
      int mosaicIdLen = 0,
      VectorOffset mosaicIdStringOffset = default(VectorOffset),
      ulong quantity = 0) {
    builder.StartObject(7);
    MosaicBuffer.AddQuantity(builder, quantity);
    MosaicBuffer.AddMosaicIdString(builder, mosaicIdStringOffset);
    MosaicBuffer.AddMosaicIdLen(builder, mosaicIdLen);
    MosaicBuffer.AddNamespaceString(builder, namespaceStringOffset);
    MosaicBuffer.AddNamespaceIdLen(builder, namespaceIdLen);
    MosaicBuffer.AddMosaicIdStructureLen(builder, mosaicIdStructureLen);
    MosaicBuffer.AddMosaicStructureLen(builder, mosaicStructureLen);
    return MosaicBuffer.EndMosaicBuffer(builder);
  }

  internal static void StartMosaicBuffer(FlatBufferBuilder builder) { builder.StartObject(7); }
  internal static void AddMosaicStructureLen(FlatBufferBuilder builder, int mosaicStructureLen) { builder.AddInt(0, mosaicStructureLen, 0); }
  internal static void AddMosaicIdStructureLen(FlatBufferBuilder builder, int mosaicIdStructureLen) { builder.AddInt(1, mosaicIdStructureLen, 0); }
  internal static void AddNamespaceIdLen(FlatBufferBuilder builder, int namespaceIdLen) { builder.AddInt(2, namespaceIdLen, 0); }
  internal static void AddNamespaceString(FlatBufferBuilder builder, VectorOffset namespaceStringOffset) { builder.AddOffset(3, namespaceStringOffset.Value, 0); }
  internal static VectorOffset CreateNamespaceStringVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartNamespaceStringVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static void AddMosaicIdLen(FlatBufferBuilder builder, int mosaicIdLen) { builder.AddInt(4, mosaicIdLen, 0); }
  internal static void AddMosaicIdString(FlatBufferBuilder builder, VectorOffset mosaicIdStringOffset) { builder.AddOffset(5, mosaicIdStringOffset.Value, 0); }
  internal static VectorOffset CreateMosaicIdStringVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartMosaicIdStringVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static void AddQuantity(FlatBufferBuilder builder, ulong quantity) { builder.AddUlong(6, quantity, 0); }
  internal static Offset<MosaicBuffer> EndMosaicBuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MosaicBuffer>(o);
  }
};


}
