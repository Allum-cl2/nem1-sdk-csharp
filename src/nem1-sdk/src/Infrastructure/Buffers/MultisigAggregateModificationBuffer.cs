// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using io.nem1.sdk.Infrastructure.Imported.FlatBuffers;

namespace io.nem1.sdk.Infrastructure.Buffers
{
    internal struct MultisigAggregateModificationBuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  internal static MultisigAggregateModificationBuffer GetRootAsMultisigAggregateModificationBuffer(ByteBuffer _bb) { return GetRootAsMultisigAggregateModificationBuffer(_bb, new MultisigAggregateModificationBuffer()); }
  internal static MultisigAggregateModificationBuffer GetRootAsMultisigAggregateModificationBuffer(ByteBuffer _bb, MultisigAggregateModificationBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  internal MultisigAggregateModificationBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  internal int TransactionType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal short Version { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  internal short Network { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  internal int Timestamp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal int PublicKeyLen { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal sbyte PublicKey(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  internal int PublicKeyLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetPublicKeyBytes() { return __p.__vector_as_arraysegment(14); }
  internal long Fee { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  internal int Deadline { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal int NumerOfModifications { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal ModificationBuffer? Modifications(int j) { int o = __p.__offset(22); return o != 0 ? (ModificationBuffer?)(new ModificationBuffer()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  internal int ModificationsLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal int MinimumCosignatoriesLength { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  internal int RelativeChange { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  internal static Offset<MultisigAggregateModificationBuffer> CreateMultisigAggregateModificationBuffer(FlatBufferBuilder builder,
      int transactionType = 0,
      short version = 0,
      short network = 0,
      int timestamp = 0,
      int publicKeyLen = 0,
      VectorOffset publicKeyOffset = default(VectorOffset),
      ulong fee = 0,
      int deadline = 0,
      int numerOfModifications = 0,
      VectorOffset modificationsOffset = default(VectorOffset),
      int minimumCosignatoriesLength = 0,
      int relativeChange = 100000000) {
    builder.StartObject(12);
    MultisigAggregateModificationBuffer.AddFee(builder, fee);
    MultisigAggregateModificationBuffer.AddRelativeChange(builder, relativeChange);
    MultisigAggregateModificationBuffer.AddMinimumCosignatoriesLength(builder, minimumCosignatoriesLength);
    MultisigAggregateModificationBuffer.AddModifications(builder, modificationsOffset);
    MultisigAggregateModificationBuffer.AddNumerOfModifications(builder, numerOfModifications);
    MultisigAggregateModificationBuffer.AddDeadline(builder, deadline);
    MultisigAggregateModificationBuffer.AddPublicKey(builder, publicKeyOffset);
    MultisigAggregateModificationBuffer.AddPublicKeyLen(builder, publicKeyLen);
    MultisigAggregateModificationBuffer.AddTimestamp(builder, timestamp);
    MultisigAggregateModificationBuffer.AddTransactionType(builder, transactionType);
    MultisigAggregateModificationBuffer.AddNetwork(builder, network);
    MultisigAggregateModificationBuffer.AddVersion(builder, version);
    return MultisigAggregateModificationBuffer.EndMultisigAggregateModificationBuffer(builder);
  }

  internal static void StartMultisigAggregateModificationBuffer(FlatBufferBuilder builder) { builder.StartObject(12); }
  internal static void AddTransactionType(FlatBufferBuilder builder, int transactionType) { builder.AddInt(0, transactionType, 0); }
  internal static void AddVersion(FlatBufferBuilder builder, short version) { builder.AddShort(1, version, 0); }
  internal static void AddNetwork(FlatBufferBuilder builder, short network) { builder.AddShort(2, network, 0); }
  internal static void AddTimestamp(FlatBufferBuilder builder, int timestamp) { builder.AddInt(3, timestamp, 0); }
  internal static void AddPublicKeyLen(FlatBufferBuilder builder, int publicKeyLen) { builder.AddInt(4, publicKeyLen, 0); }
  internal static void AddPublicKey(FlatBufferBuilder builder, VectorOffset publicKeyOffset) { builder.AddOffset(5, publicKeyOffset.Value, 0); }
  internal static VectorOffset CreatePublicKeyVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartPublicKeyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static void AddFee(FlatBufferBuilder builder, ulong fee) { builder.AddUlong(6, fee, 0); }
  internal static void AddDeadline(FlatBufferBuilder builder, int deadline) { builder.AddInt(7, deadline, 0); }
  internal static void AddNumerOfModifications(FlatBufferBuilder builder, int numerOfModifications) { builder.AddInt(8, numerOfModifications, 0); }
  internal static void AddModifications(FlatBufferBuilder builder, VectorOffset modificationsOffset) { builder.AddOffset(9, modificationsOffset.Value, 0); }
  internal static VectorOffset CreateModificationsVector(FlatBufferBuilder builder, Offset<ModificationBuffer>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  internal static void StartModificationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  internal static void AddMinimumCosignatoriesLength(FlatBufferBuilder builder, int minimumCosignatoriesLength) { builder.AddInt(10, minimumCosignatoriesLength, 1000000000); }
  internal static void AddRelativeChange(FlatBufferBuilder builder, int relativeChange) {
  {
      
      builder.AddInt(11, relativeChange, 1000000000);
  } }
  internal static Offset<MultisigAggregateModificationBuffer> EndMultisigAggregateModificationBuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MultisigAggregateModificationBuffer>(o);
  }
  internal static void FinishMultisigAggregateModificationBufferBuffer(FlatBufferBuilder builder, Offset<MultisigAggregateModificationBuffer> offset) { builder.Finish(offset.Value); }
};


}
